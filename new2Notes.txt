Certainly! Let's separate inheritance and encapsulation in your code:

**Inheritance**:

```
class MySuperClass {
    int a;
    int b;

    int add() {
        return a + b;
    }
}

class MySubClass extends MySuperClass {
    int c;

    int subtract() {
        return a - b - c;
    }
}
```

In this inheritance example:

- `MySuperClass` defines two attributes `a` and `b` along with an `add` method.
- `MySubClass` extends `MySuperClass` and adds an additional attribute `c` and a `subtract` method.

**Encapsulation**:

```
class EncapsulatedClass {
    private int a;
    private int b;

    public void setA(int a) {
        this.a = a;
    }

    public int getA() {
        return a;
    }

    public void setB(int b) {
        this.b = b;
    }

    public int getB() {
        return b;
    }

    int add() {
        return a + b;
    }
}
```

In this encapsulation example:

- `EncapsulatedClass` encapsulates attributes `a` and `b` by making them private and providing public getter and setter methods to access and modify them.
- The `add` method calculates the sum of `a` and `b`.

You can now use these classes separately in your `Main` class for inheritance and encapsulation:

```
public class Main {
    public static void main(String[] args) {
        // Inheritance
        MySubClass subObj = new MySubClass();
        subObj.a = 5;
        subObj.b = 3;
        subObj.c = 2;
        int resultAdd = subObj.add();
        int resultSubtract = subObj.subtract();

        System.out.println("Inheritance - Add: " + resultAdd);
        System.out.println("Inheritance - Subtract: " + resultSubtract);

        // Encapsulation
        EncapsulatedClass encapsulatedObj = new EncapsulatedClass();
        encapsulatedObj.setA(5);
        encapsulatedObj.setB(3);
        int encapsulatedResult = encapsulatedObj.add();

        System.out.println("Encapsulation - Add: " + encapsulatedResult);
    }
}
```

