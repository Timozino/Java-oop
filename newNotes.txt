To create inheritance and encapsulation in your code, you can follow these steps:

1. Create a superclass (parent class) that defines common attributes and methods.
2. Create a subclass (child class) that inherits from the superclass and adds its own attributes and methods.
3. Use encapsulation by making the attributes private and providing public getter and setter methods to access and modify them.

Here's an example based on your existing code:

```java
class MySuperClass {
    private int a;
    private int b;

    // Constructor
    public MySuperClass(int a, int b) {
        this.a = a;
        this.b = b;
    }

    public int getA() {
        return a;
    }

    public void setA(int a) {
        this.a = a;
    }

    public int getB() {
        return b;
    }

    public void setB(int b) {
        this.b = b;
    }

    public int add() {
        return a + b;
    }
}

class MySubClass extends MySuperClass {
    private int c;

    // Constructor
    public MySubClass(int a, int b, int c) {
        super(a, b);
        this.c = c;
    }

    public int getC() {
        return c;
    }

    public void setC(int c) {
        this.c = c;
    }

    // Override the add method to include the 'c' attribute
    @Override
    public int add() {
        return super.add() + c;
    }
}

public class Main {
    public static void main(String[] args) {
        MySubClass obj = new MySubClass(5, 3, 2);

        // Access and modify attributes using getter and setter methods
        int a = obj.getA();
        int b = obj.getB();
        int c = obj.getC();

        System.out.println("A: " + a);
        System.out.println("B: " + b);
        System.out.println("C: " + c);

        // Call the overridden add method
        int result = obj.add();
        System.out.println("Result: " + result);
    }
}
```

In this code:

- `MySuperClass` is the superclass that encapsulates attributes `a` and `b`.
- `MySubClass` is the subclass that inherits from `MySuperClass` and adds its own attribute `c`.
- Encapsulation is achieved by making attributes private and providing getter and setter methods to access and modify them.
- The `add` method in `MySubClass` overrides the `add` method in `MySuperClass` to include the `c` attribute when performing addition.